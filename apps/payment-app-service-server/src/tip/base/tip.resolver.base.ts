/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tip } from "./Tip";
import { TipCountArgs } from "./TipCountArgs";
import { TipFindManyArgs } from "./TipFindManyArgs";
import { TipFindUniqueArgs } from "./TipFindUniqueArgs";
import { CreateTipArgs } from "./CreateTipArgs";
import { UpdateTipArgs } from "./UpdateTipArgs";
import { DeleteTipArgs } from "./DeleteTipArgs";
import { PaymentTransaction } from "../../paymentTransaction/base/PaymentTransaction";
import { TipService } from "../tip.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tip)
export class TipResolverBase {
  constructor(
    protected readonly service: TipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "read",
    possession: "any",
  })
  async _tipsMeta(
    @graphql.Args() args: TipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tip])
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "read",
    possession: "any",
  })
  async tips(@graphql.Args() args: TipFindManyArgs): Promise<Tip[]> {
    return this.service.tips(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tip, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "read",
    possession: "own",
  })
  async tip(@graphql.Args() args: TipFindUniqueArgs): Promise<Tip | null> {
    const result = await this.service.tip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tip)
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "create",
    possession: "any",
  })
  async createTip(@graphql.Args() args: CreateTipArgs): Promise<Tip> {
    return await this.service.createTip({
      ...args,
      data: {
        ...args.data,

        paymentTransaction: args.data.paymentTransaction
          ? {
              connect: args.data.paymentTransaction,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tip)
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "update",
    possession: "any",
  })
  async updateTip(@graphql.Args() args: UpdateTipArgs): Promise<Tip | null> {
    try {
      return await this.service.updateTip({
        ...args,
        data: {
          ...args.data,

          paymentTransaction: args.data.paymentTransaction
            ? {
                connect: args.data.paymentTransaction,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tip)
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "delete",
    possession: "any",
  })
  async deleteTip(@graphql.Args() args: DeleteTipArgs): Promise<Tip | null> {
    try {
      return await this.service.deleteTip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentTransaction, {
    nullable: true,
    name: "paymentTransaction",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  async getPaymentTransaction(
    @graphql.Parent() parent: Tip
  ): Promise<PaymentTransaction | null> {
    const result = await this.service.getPaymentTransaction(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
