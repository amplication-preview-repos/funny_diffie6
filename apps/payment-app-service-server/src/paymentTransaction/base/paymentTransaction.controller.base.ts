/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PaymentTransactionService } from "../paymentTransaction.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PaymentTransactionCreateInput } from "./PaymentTransactionCreateInput";
import { PaymentTransaction } from "./PaymentTransaction";
import { PaymentTransactionFindManyArgs } from "./PaymentTransactionFindManyArgs";
import { PaymentTransactionWhereUniqueInput } from "./PaymentTransactionWhereUniqueInput";
import { PaymentTransactionUpdateInput } from "./PaymentTransactionUpdateInput";
import { TipFindManyArgs } from "../../tip/base/TipFindManyArgs";
import { Tip } from "../../tip/base/Tip";
import { TipWhereUniqueInput } from "../../tip/base/TipWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PaymentTransactionControllerBase {
  constructor(
    protected readonly service: PaymentTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentTransaction })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPaymentTransaction(
    @common.Body() data: PaymentTransactionCreateInput
  ): Promise<PaymentTransaction> {
    return await this.service.createPaymentTransaction({
      data: {
        ...data,

        bill: data.bill
          ? {
              connect: data.bill,
            }
          : undefined,
      },
      select: {
        amount: true,

        bill: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentTransaction] })
  @ApiNestedQuery(PaymentTransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentTransactions(
    @common.Req() request: Request
  ): Promise<PaymentTransaction[]> {
    const args = plainToClass(PaymentTransactionFindManyArgs, request.query);
    return this.service.paymentTransactions({
      ...args,
      select: {
        amount: true,

        bill: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentTransaction(
    @common.Param() params: PaymentTransactionWhereUniqueInput
  ): Promise<PaymentTransaction | null> {
    const result = await this.service.paymentTransaction({
      where: params,
      select: {
        amount: true,

        bill: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePaymentTransaction(
    @common.Param() params: PaymentTransactionWhereUniqueInput,
    @common.Body() data: PaymentTransactionUpdateInput
  ): Promise<PaymentTransaction | null> {
    try {
      return await this.service.updatePaymentTransaction({
        where: params,
        data: {
          ...data,

          bill: data.bill
            ? {
                connect: data.bill,
              }
            : undefined,
        },
        select: {
          amount: true,

          bill: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePaymentTransaction(
    @common.Param() params: PaymentTransactionWhereUniqueInput
  ): Promise<PaymentTransaction | null> {
    try {
      return await this.service.deletePaymentTransaction({
        where: params,
        select: {
          amount: true,

          bill: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tips")
  @ApiNestedQuery(TipFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "read",
    possession: "any",
  })
  async findTips(
    @common.Req() request: Request,
    @common.Param() params: PaymentTransactionWhereUniqueInput
  ): Promise<Tip[]> {
    const query = plainToClass(TipFindManyArgs, request.query);
    const results = await this.service.findTips(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        id: true,

        paymentTransaction: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tips")
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "update",
    possession: "any",
  })
  async connectTips(
    @common.Param() params: PaymentTransactionWhereUniqueInput,
    @common.Body() body: TipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tips: {
        connect: body,
      },
    };
    await this.service.updatePaymentTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tips")
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "update",
    possession: "any",
  })
  async updateTips(
    @common.Param() params: PaymentTransactionWhereUniqueInput,
    @common.Body() body: TipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tips: {
        set: body,
      },
    };
    await this.service.updatePaymentTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tips")
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "update",
    possession: "any",
  })
  async disconnectTips(
    @common.Param() params: PaymentTransactionWhereUniqueInput,
    @common.Body() body: TipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tips: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }
}
