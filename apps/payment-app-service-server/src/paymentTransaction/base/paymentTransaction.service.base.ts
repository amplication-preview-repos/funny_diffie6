/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentTransaction as PrismaPaymentTransaction,
  Tip as PrismaTip,
  Bill as PrismaBill,
} from "@prisma/client";

export class PaymentTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentTransaction.count(args);
  }

  async paymentTransactions<T extends Prisma.PaymentTransactionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentTransactionFindManyArgs>
  ): Promise<PrismaPaymentTransaction[]> {
    return this.prisma.paymentTransaction.findMany<Prisma.PaymentTransactionFindManyArgs>(
      args
    );
  }
  async paymentTransaction<T extends Prisma.PaymentTransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentTransactionFindUniqueArgs>
  ): Promise<PrismaPaymentTransaction | null> {
    return this.prisma.paymentTransaction.findUnique(args);
  }
  async createPaymentTransaction<T extends Prisma.PaymentTransactionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentTransactionCreateArgs>
  ): Promise<PrismaPaymentTransaction> {
    return this.prisma.paymentTransaction.create<T>(args);
  }
  async updatePaymentTransaction<T extends Prisma.PaymentTransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentTransactionUpdateArgs>
  ): Promise<PrismaPaymentTransaction> {
    return this.prisma.paymentTransaction.update<T>(args);
  }
  async deletePaymentTransaction<T extends Prisma.PaymentTransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentTransactionDeleteArgs>
  ): Promise<PrismaPaymentTransaction> {
    return this.prisma.paymentTransaction.delete(args);
  }

  async findTips(
    parentId: string,
    args: Prisma.TipFindManyArgs
  ): Promise<PrismaTip[]> {
    return this.prisma.paymentTransaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tips(args);
  }

  async getBill(parentId: string): Promise<PrismaBill | null> {
    return this.prisma.paymentTransaction
      .findUnique({
        where: { id: parentId },
      })
      .bill();
  }
}
