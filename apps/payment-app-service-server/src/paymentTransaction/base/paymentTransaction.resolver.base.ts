/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentTransaction } from "./PaymentTransaction";
import { PaymentTransactionCountArgs } from "./PaymentTransactionCountArgs";
import { PaymentTransactionFindManyArgs } from "./PaymentTransactionFindManyArgs";
import { PaymentTransactionFindUniqueArgs } from "./PaymentTransactionFindUniqueArgs";
import { CreatePaymentTransactionArgs } from "./CreatePaymentTransactionArgs";
import { UpdatePaymentTransactionArgs } from "./UpdatePaymentTransactionArgs";
import { DeletePaymentTransactionArgs } from "./DeletePaymentTransactionArgs";
import { TipFindManyArgs } from "../../tip/base/TipFindManyArgs";
import { Tip } from "../../tip/base/Tip";
import { Bill } from "../../bill/base/Bill";
import { PaymentTransactionService } from "../paymentTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentTransaction)
export class PaymentTransactionResolverBase {
  constructor(
    protected readonly service: PaymentTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  async _paymentTransactionsMeta(
    @graphql.Args() args: PaymentTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentTransaction])
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  async paymentTransactions(
    @graphql.Args() args: PaymentTransactionFindManyArgs
  ): Promise<PaymentTransaction[]> {
    return this.service.paymentTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "own",
  })
  async paymentTransaction(
    @graphql.Args() args: PaymentTransactionFindUniqueArgs
  ): Promise<PaymentTransaction | null> {
    const result = await this.service.paymentTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTransaction)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "create",
    possession: "any",
  })
  async createPaymentTransaction(
    @graphql.Args() args: CreatePaymentTransactionArgs
  ): Promise<PaymentTransaction> {
    return await this.service.createPaymentTransaction({
      ...args,
      data: {
        ...args.data,

        bill: args.data.bill
          ? {
              connect: args.data.bill,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTransaction)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "update",
    possession: "any",
  })
  async updatePaymentTransaction(
    @graphql.Args() args: UpdatePaymentTransactionArgs
  ): Promise<PaymentTransaction | null> {
    try {
      return await this.service.updatePaymentTransaction({
        ...args,
        data: {
          ...args.data,

          bill: args.data.bill
            ? {
                connect: args.data.bill,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentTransaction)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "delete",
    possession: "any",
  })
  async deletePaymentTransaction(
    @graphql.Args() args: DeletePaymentTransactionArgs
  ): Promise<PaymentTransaction | null> {
    try {
      return await this.service.deletePaymentTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Tip], { name: "tips" })
  @nestAccessControl.UseRoles({
    resource: "Tip",
    action: "read",
    possession: "any",
  })
  async findTips(
    @graphql.Parent() parent: PaymentTransaction,
    @graphql.Args() args: TipFindManyArgs
  ): Promise<Tip[]> {
    const results = await this.service.findTips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Bill, {
    nullable: true,
    name: "bill",
  })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async getBill(
    @graphql.Parent() parent: PaymentTransaction
  ): Promise<Bill | null> {
    const result = await this.service.getBill(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
