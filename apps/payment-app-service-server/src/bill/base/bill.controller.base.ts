/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BillService } from "../bill.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillCreateInput } from "./BillCreateInput";
import { Bill } from "./Bill";
import { BillFindManyArgs } from "./BillFindManyArgs";
import { BillWhereUniqueInput } from "./BillWhereUniqueInput";
import { BillUpdateInput } from "./BillUpdateInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";
import { PaymentTransactionFindManyArgs } from "../../paymentTransaction/base/PaymentTransactionFindManyArgs";
import { PaymentTransaction } from "../../paymentTransaction/base/PaymentTransaction";
import { PaymentTransactionWhereUniqueInput } from "../../paymentTransaction/base/PaymentTransactionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BillControllerBase {
  constructor(
    protected readonly service: BillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bill })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBill(@common.Body() data: BillCreateInput): Promise<Bill> {
    return await this.service.createBill({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bill] })
  @ApiNestedQuery(BillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bills(@common.Req() request: Request): Promise<Bill[]> {
    const args = plainToClass(BillFindManyArgs, request.query);
    return this.service.bills({
      ...args,
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bill(
    @common.Param() params: BillWhereUniqueInput
  ): Promise<Bill | null> {
    const result = await this.service.bill({
      where: params,
      select: {
        createdAt: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        qrCode: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBill(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() data: BillUpdateInput
  ): Promise<Bill | null> {
    try {
      return await this.service.updateBill({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          qrCode: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBill(
    @common.Param() params: BillWhereUniqueInput
  ): Promise<Bill | null> {
    try {
      return await this.service.deleteBill({
        where: params,
        select: {
          createdAt: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          qrCode: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: BillWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        bill: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        items: true,
        prices: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async connectOrders(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async updateOrders(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async disconnectOrders(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentTransactions")
  @ApiNestedQuery(PaymentTransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  async findPaymentTransactions(
    @common.Req() request: Request,
    @common.Param() params: BillWhereUniqueInput
  ): Promise<PaymentTransaction[]> {
    const query = plainToClass(PaymentTransactionFindManyArgs, request.query);
    const results = await this.service.findPaymentTransactions(params.id, {
      ...query,
      select: {
        amount: true,

        bill: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentTransactions")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async connectPaymentTransactions(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: PaymentTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTransactions: {
        connect: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentTransactions")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async updatePaymentTransactions(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: PaymentTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTransactions: {
        set: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentTransactions")
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentTransactions(
    @common.Param() params: BillWhereUniqueInput,
    @common.Body() body: PaymentTransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTransactions: {
        disconnect: body,
      },
    };
    await this.service.updateBill({
      where: params,
      data,
      select: { id: true },
    });
  }
}
