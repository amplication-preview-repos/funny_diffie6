/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bill } from "./Bill";
import { BillCountArgs } from "./BillCountArgs";
import { BillFindManyArgs } from "./BillFindManyArgs";
import { BillFindUniqueArgs } from "./BillFindUniqueArgs";
import { CreateBillArgs } from "./CreateBillArgs";
import { UpdateBillArgs } from "./UpdateBillArgs";
import { DeleteBillArgs } from "./DeleteBillArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { PaymentTransactionFindManyArgs } from "../../paymentTransaction/base/PaymentTransactionFindManyArgs";
import { PaymentTransaction } from "../../paymentTransaction/base/PaymentTransaction";
import { User } from "../../user/base/User";
import { BillService } from "../bill.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bill)
export class BillResolverBase {
  constructor(
    protected readonly service: BillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async _billsMeta(
    @graphql.Args() args: BillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bill])
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "any",
  })
  async bills(@graphql.Args() args: BillFindManyArgs): Promise<Bill[]> {
    return this.service.bills(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bill, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "read",
    possession: "own",
  })
  async bill(@graphql.Args() args: BillFindUniqueArgs): Promise<Bill | null> {
    const result = await this.service.bill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "create",
    possession: "any",
  })
  async createBill(@graphql.Args() args: CreateBillArgs): Promise<Bill> {
    return await this.service.createBill({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "update",
    possession: "any",
  })
  async updateBill(@graphql.Args() args: UpdateBillArgs): Promise<Bill | null> {
    try {
      return await this.service.updateBill({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bill)
  @nestAccessControl.UseRoles({
    resource: "Bill",
    action: "delete",
    possession: "any",
  })
  async deleteBill(@graphql.Args() args: DeleteBillArgs): Promise<Bill | null> {
    try {
      return await this.service.deleteBill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: Bill,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentTransaction], {
    name: "paymentTransactions",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTransaction",
    action: "read",
    possession: "any",
  })
  async findPaymentTransactions(
    @graphql.Parent() parent: Bill,
    @graphql.Args() args: PaymentTransactionFindManyArgs
  ): Promise<PaymentTransaction[]> {
    const results = await this.service.findPaymentTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrder(@graphql.Parent() parent: Bill): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Bill): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
